// <auto-generated />
using System;
using GameManager.Persistence.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameManager.Server.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20230603213805_AddTrackerHistory")]
    partial class AddTrackerHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("GameManager.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CurrentTurnPlayerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastTurnStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntryCode")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.GameOptions", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShareOtherPlayerTrackers")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.ToTable("GameOptions");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Tracker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartingValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Trackers");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.TrackerHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("NewValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrackerId");

                    b.ToTable("TrackerHistories", (string)null);
                });

            modelBuilder.Entity("GameManager.Domain.Entities.TrackerValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrackerId");

                    b.ToTable("TrackerValues");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.GameOptions", b =>
                {
                    b.HasOne("GameManager.Domain.Entities.Game", null)
                        .WithOne("Options")
                        .HasForeignKey("GameManager.Domain.Entities.GameOptions", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Player", b =>
                {
                    b.HasOne("GameManager.Domain.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Tracker", b =>
                {
                    b.HasOne("GameManager.Domain.Entities.Game", null)
                        .WithMany("Trackers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameManager.Domain.Entities.TrackerHistory", b =>
                {
                    b.HasOne("GameManager.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameManager.Domain.Entities.Tracker", null)
                        .WithMany()
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameManager.Domain.Entities.TrackerValue", b =>
                {
                    b.HasOne("GameManager.Domain.Entities.Player", null)
                        .WithMany("TrackerValues")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameManager.Domain.Entities.Tracker", null)
                        .WithMany()
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Turn", b =>
                {
                    b.HasOne("GameManager.Domain.Entities.Player", null)
                        .WithMany("Turns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Game", b =>
                {
                    b.Navigation("Options")
                        .IsRequired();

                    b.Navigation("Trackers");
                });

            modelBuilder.Entity("GameManager.Domain.Entities.Player", b =>
                {
                    b.Navigation("TrackerValues");

                    b.Navigation("Turns");
                });
#pragma warning restore 612, 618
        }
    }
}
